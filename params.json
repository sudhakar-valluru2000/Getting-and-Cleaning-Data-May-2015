{"name":"Getting-and-cleaning-data-may-2015","tagline":"Getting and Cleaning Data Course Project","body":"# Getting-and-Cleaning-Data-May-2015\r\nGetting and Cleaning Data Course Project\r\n\r\n#GOAL\r\n\r\n\r\n You should create one R script called run_analysis.R that does the following. \r\n1. Merges the training and the test sets to create one data set.\r\n2. Extracts only the measurements on the mean and standard deviation for each measurement. \r\n3. Uses descriptive activity names to name the activities in the data set\r\n4. Appropriately labels the data set with descriptive variable names. \r\n5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.\r\n\r\nThe purpose of this project is to demonstrate your ability to collect, work with, and clean a data set. The goal is to prepare tidy data that can be used for later analysis. You will be graded by your peers on a series of yes/no questions related to the project. You will be required to submit: 1) a tidy data set as described below, 2) a link to a Github repository with your script for performing the analysis, and 3) a code book that describes the variables, the data, and any transformations or work that you performed to clean up the data called CodeBook.md. You should also include a README.md in the repo with your scripts. This repo explains how all of the scripts work and how they are connected. \r\n\r\nOne of the most exciting areas in all of data science right now is wearable computing - see for example this article . Companies like Fitbit, Nike, and Jawbone Up are racing to develop the most advanced algorithms to attract new users. The data linked to from the course website represent data collected from the accelerometers from the Samsung Galaxy S smartphone. A full description is available at the site where the data was obtained:\r\n\r\nhttp://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones\r\n\r\nHere are the data for the project:\r\n\r\nhttps://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip\r\n\r\n#Getting Started\r\n\r\nA full description is available at the site where the data was obtained:\r\nhttp://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones\r\nHere are the data for the project:\r\nhttps://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip \r\nis downloaded and extracted in the R Home Directory.\r\n\r\nThe R code in run_analysis.R proceeds under the assumption that the above files are unzipped in the home directory and available\r\n\r\n#Pre-Step (a) - \r\n#Read the following file first to understand the data and the structure\r\nsubject_test.txt\r\ny_test.txt\r\nX_test.txt\r\nsubject_train.txt\r\ny_train.txt\r\nX_train.txt\r\nfeatures.txt\r\nactivity_labels.txt\r\n\r\n\r\n#Library Used for this project.\r\nlibrary (dplyr)\r\nlibrary (tidyr)\r\nlibrary(reshape2)\r\n\r\n#Read datafiles into their respective data frames\r\ndf_subject_test <- read.table (\"./subject_test.txt\")\r\n\r\ndf_y_test <- read.table (\"./y_test.txt\")\r\n\r\ndf_X_test <- read.table (\"./X_test.txt\")\r\n\r\ndf_subject_train <- read.table (\"./subject_train.txt\")\r\n\r\ndf_y_train <- read.table (\"./y_train.txt\")\r\n\r\ndf_X_train <- read.table (\"./X_train.txt\")\r\n\r\ndf_features <- read.table (\"./features.txt\")\r\n\r\ndf_activity_labels <- read.table (\"./activity_labels.txt\")\r\nnames(df_activity_labels) <- c(\"Activity\", \"Activity_Label\")\r\n\r\n#Pre-Step (b) - \r\n#Merge data frames Subjects\r\nsubject <- rbind(df_subject_train, df_subject_test)\r\n\r\n#Merge Activity\r\nactivity <- rbind (df_y_train, df_y_test)\r\n\r\n#Merge Features\r\nfeatures <- rbind (df_X_train, df_X_test)\r\n\r\n#Pre-Step (c) - \r\n# Add column names to features from original features file\r\nnames(features) <- t(df_features[2])\r\n\r\n# Add column names to activity\r\nnames(activity) <- \"Activity\"\r\n\r\n# Add column name to subject\r\nnames(subject) <- \"Subject\"\r\n\r\n## 1. Merges the training and the test sets to create one data set.\r\n#Merge the above 3 features, activity and subject into one HUGE big data\r\n\r\nbigdata <- cbind(features, activity, subject)\r\n\r\n#Extract fields with mean and std (standard deviation)\r\n\r\n## 2. Extracts only the measurements on the mean and standard deviation for each measurement.\r\n\r\n#get_mean_std <- grepl(\"mean|std\", names(bigdata), ignore.case=TRUE)\r\nget_mean_std <- grep(\".*Mean.*|.*Std.*\",names(bigdata), ignore.case=TRUE)\r\n#Append filds 562, 563 which are Activity and Subject\r\nall_fields <- c(get_mean_std, 562, 563)\r\ndim(all_fields)\r\n#Select data with mean, std, 562 and 563\r\nfetch_data <- bigdata[,all_fields]\r\n\r\n## 3. Uses descriptive activity names to name the activities in the data set\r\nfetch_data_w_activity <- arrange(join(fetch_data, df_activity_labels), Activity )\r\n\r\n## 4. Appropriately labels the data set with descriptive activity names.\r\n# Rename column names to make them more self explanatory\r\nnames(fetch_data_w_activity) <- gsub(\"-mean()\", \"Mean\", names(fetch_data_w_activity), ignore.case = TRUE)\r\nnames(fetch_data_w_activity) <- gsub(\"-std()\", \"STD\", names(fetch_data_w_activity), ignore.case = TRUE)\r\nnames(fetch_data_w_activity) <- gsub(\"BodyBody\", \"Body\", names(fetch_data_w_activity), ignore.case = TRUE)\r\nnames(fetch_data_w_activity) <- gsub(\"^f\", \"Freq\", names(fetch_data_w_activity), ignore.case = TRUE)\r\nnames(fetch_data_w_activity) <- gsub(\"-freq()\", \"Freq\", names(fetch_data_w_activity), ignore.case = TRUE)\r\nnames(fetch_data_w_activity) <- gsub(\"^t\", \"Time\", names(fetch_data_w_activity), ignore.case = TRUE)\r\n\r\nnames(fetch_data_w_activity) <- gsub(\"()\", \"\", names(fetch_data_w_activity), ignore.case = TRUE)\r\n\r\n\r\n\r\n## 5. Creates a second, independent tidy data set with the average of each variable for each activity and each subject.\r\n\r\n#Rearrange the data to wide format with melt function with Subject, Activity and Activity_Label\r\nmelt_data <- melt(fetch_data_w_activity, id = c(\"Subject\", \"Activity\", \"Activity_Label\"))\r\n\r\n#Tidaydata or rearrange using dcast and find mean\r\ntidydata <- dcast(melt_data, Subject + Activity_Label ~ variable, mean)\r\n#print(head(tidydata))\r\n#Write final data into a file\r\nwrite.table (tidydata, \"./Tidydata.txt\", row.names=FALSE)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}